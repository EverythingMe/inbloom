from __future__ import absolute_import, division

from binascii import hexlify
from unittest import TestCase

import inbloom


class InBloomTestCase(TestCase):
    def test_functionality(self):
        bf = inbloom.Filter(1000, 0.01)
        keys = [
            "foo",
            "bar",
            "foosdfsdfs",
            "fossdfsdfo",
            "foasdfasdfasdfasdfo",
            "foasdfasdfasdasdfasdfasdfasdfasdfo",
        ]
        faux = ["goo", "gar", "gaz"]
        for k in keys:
            bf.add(k)

        for k in keys:
            assert bf.contains(k)

        for k in faux:
            assert not bf.contains(k)

        expected = b
        actual = hexlify(bf.buffer()).upper()
        assert expected == actual

    def test_dump_load(self):
        bf = inbloom.Filter(1000, 0.01)
        bf.add("abc")
        expected = b"76830064000003e
        actual = hexlify(inbloom.dump(bf))
        assert expected == actual

        bf = inbloom.load(inbloom.dump(bf))
        actual = hexlify(inbloom.dump(bf))
        assert expected == actual

        data = inbloom.dump(bf)
        data = str([0xFF, 0xFF]) + str(data[2:])

        with self.assertRaisesRegex(inbloom.error, "checksum mismatch"):
            inbloom.load(data)

        data = data[:4]
        with self.assertRaisesRegex(inbloom.error, "incomplete payload"):
            inbloom.load(data)


if __name__ == "__main__":
    import unittest

    unittest.main()
